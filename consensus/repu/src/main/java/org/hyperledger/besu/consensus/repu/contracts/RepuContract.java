/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package org.hyperledger.besu.consensus.repu.contracts;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
public class RepuContract extends Contract {
  public static final String BINARY = "6080604052600a6009556001600a553480156200001b57600080fd5b5060405162002b8f38038062002b8f833981810160405281019062000041919062000634565b6200005281620000f460201b60201c565b620000626200019e60201b60201c565b600060068190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000801565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60005b6001805490508110156200029a576200020160018281548110620001ca57620001c96200067b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620002c560201b60201c565b600080600184815481106200021b576200021a6200067b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806200029190620006e3565b915050620001a1565b50620002ab6200036560201b60201c565b60019080519060200190620002c29291906200051c565b50565b6000600a54600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200031691906200075f565b600954670de0b6b3a76400008473ffffffffffffffffffffffffffffffffffffffff16316200034691906200075f565b6200035291906200075f565b6200035e919062000797565b9050919050565b6060600060018054905067ffffffffffffffff8111156200038b576200038a620007d2565b5b604051908082528060200260200182016040528015620003ba5781602001602082028036833780820191505090505b509050600060018054806020026020016040519081016040528092919081815260200182805480156200044357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003f8575b5050505050905060005b6001805490508110156200051357600080600183815481106200047557620004746200067b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054838281518110620004f157620004f06200067b565b5b60200260200101818152505080806200050a90620006e3565b9150506200044d565b50809250505090565b82805482825590600052602060002090810192821562000598579160200282015b82811115620005975782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906200053d565b5b509050620005a79190620005ab565b5090565b5b80821115620005c6576000816000905550600101620005ac565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005fc82620005cf565b9050919050565b6200060e81620005ef565b81146200061a57600080fd5b50565b6000815190506200062e8162000603565b92915050565b600080604083850312156200064e576200064d620005ca565b5b60006200065e858286016200061d565b925050602062000671858286016200061d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620006f082620006d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620007255762000724620006aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200076c82620006d9565b91506200077983620006d9565b9250826200078c576200078b62000730565b5b828204905092915050565b6000620007a482620006d9565b9150620007b183620006d9565b9250828201905080821115620007cc57620007cb620006aa565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61237e80620008116000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063933a9ce8116100a2578063b872953e11610071578063b872953e1461027e578063b9137cca146102ae578063bdf3e088146102cc578063cdd72253146102e8578063facd743b146103065761010b565b8063933a9ce81461020a5780639cbfc76514610228578063b28fc60014610244578063b7ab4db5146102605761010b565b80633ea4fa47116100de5780633ea4fa47146101865780637b778b70146101a25780637ed21005146101be578063899c7184146101da5761010b565b806306a49fce146101105780631ba5eec01461012e5780632945400c146101385780632e97766d14610168575b600080fd5b610118610336565b6040516101259190611c9d565b60405180910390f35b6101366103c4565b005b610152600480360381019061014d9190611cf0565b610426565b60405161015f9190611d36565b60405180910390f35b61017061043e565b60405161017d9190611d36565b60405180910390f35b6101a0600480360381019061019b9190611d7d565b610446565b005b6101bc60048036038101906101b79190611daa565b6104aa565b005b6101d860048036038101906101d39190611daa565b6107ac565b005b6101f460048036038101906101ef9190611cf0565b6107de565b6040516102019190611d36565b60405180910390f35b6102126107f6565b60405161021f9190611df9565b60405180910390f35b610242600480360381019061023d9190611cf0565b610820565b005b61025e60048036038101906102599190611d7d565b61088e565b005b6102686108f2565b6040516102759190611c9d565b60405180910390f35b61029860048036038101906102939190611cf0565b610980565b6040516102a59190611d36565b60405180910390f35b6102b6610998565b6040516102c39190611c9d565b60405180910390f35b6102e660048036038101906102e19190611cf0565b610b94565b005b6102f0610d74565b6040516102fd9190611c9d565b60405180910390f35b610320600480360381019061031b9190611cf0565b610e02565b60405161032d9190611e2f565b60405180910390f35b606060038054806020026020016040519081016040528092919081815260200182805480156103ba57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610370575b5050505050905090565b600660008154809291906103d790611e79565b91905055506000600560016103ea61043e565b6103f49190611ec1565b6103fe9190611f24565b036104245761040b610ea3565b6006600081548092919061041e90611e79565b91905055505b565b60056020528060005260406000206000915090505481565b600043905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a057600080fd5b8060098190555050565b60048054905061054033600480548060200260200160405190810160405280929190818152602001828054801561053657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104ec575b5050505050610f86565b14610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790611fb2565b60405180910390fd5b818073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036105ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e69061201e565b60405180910390fd5b6105f761100c565b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610749576003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6107523361105d565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107a0919061203e565b92505081905550505050565b6107b46103c4565b600060056107c061043e565b6107ca9190611f24565b036107da576107d982826104aa565b5b5050565b60006020528060005260406000206000915090505481565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087a57600080fd5b610883816110f5565b61088b611307565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e857600080fd5b80600a8190555050565b6060600180548060200260200160405190810160405280929190818152602001828054801561097657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161092c575b5050505050905090565b60026020528060005260406000206000915090505481565b606060006001805490506006546109af9190611f24565b905060008060018054905067ffffffffffffffff8111156109d3576109d2612072565b5b604051908082528060200260200182016040528015610a015781602001602082028036833780820191505090505b5090505b600180549050831015610abf5760018381548110610a2657610a256120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818381518110610a6457610a636120a1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508280610aa990611e79565b9350508180610ab790611e79565b925050610a05565b600092505b600180549050600654610ad79190611f24565b831015610b8b5760018381548110610af257610af16120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818381518110610b3057610b2f6120a1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508280610b7590611e79565b9350508180610b8390611e79565b925050610ac4565b80935050505090565b8060008173ffffffffffffffffffffffffffffffffffffffff1663933a9ce86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0691906120e5565b90508073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90612184565b60405180910390fd5b82610ca281611412565b610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd8906121f0565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ed8f67f856040518263ffffffff1660e01b8152600401610d3c9190611df9565b600060405180830381600087803b158015610d5657600080fd5b505af1158015610d6a573d6000803e3d6000fd5b5050505050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610df857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610dae575b5050505050905090565b6000600180549050610e9a836001805480602002602001604051908101604052809291908181526020018280548015610e9057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e46575b5050505050610f86565b14159050919050565b6000610ead611435565b905060036000610ebd9190611ae5565b60005b600480549050811015610f635760006002600060048481548110610ee757610ee66120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610f5b90611e79565b915050610ec0565b5060046000610f729190611ae5565b610f7b81611630565b610f83611307565b50565b600080600090505b8251811015611000578373ffffffffffffffffffffffffffffffffffffffff16838281518110610fc157610fc06120a1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610fed5780915050611006565b8080610ff890611e79565b915050610f8e565b50815190505b92915050565b600060054361101b9190611f24565b1461105b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110529061225c565b60405180910390fd5b565b6000600a54600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ac919061227c565b600954670de0b6b3a76400008473ffffffffffffffffffffffffffffffffffffffff16316110da919061227c565b6110e4919061227c565b6110ee919061203e565b9050919050565b600061118782600180548060200260200160405190810160405280929190818152602001828054801561117d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611133575b5050505050610f86565b905060018054905081106111d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c7906122f9565b60405180910390fd5b60018080805490506111e29190611ec1565b815481106111f3576111f26120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018281548110611232576112316120a1565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061128c5761128b612319565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b60005b6001805490508110156113f15761135e6001828154811061132e5761132d6120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661105d565b60008060018481548110611375576113746120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806113e990611e79565b91505061130a565b506113fa611894565b6001908051906020019061140f929190611b06565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600060038054905067ffffffffffffffff81111561145857611457612072565b5b6040519080825280602002602001820160405280156114865781602001602082028036833780820191505090505b509050600060038054905067ffffffffffffffff8111156114aa576114a9612072565b5b6040519080825280602002602001820160405280156114d85781602001602082028036833780820191505090505b50905060005b600380549050811015611627576002600060038381548110611503576115026120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483828151811061157c5761157b6120a1565b5b6020026020010181815250506003818154811061159c5761159b6120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106115da576115d96120a1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061161f90611e79565b9150506114de565b50809250505090565b6000805b8251811080156116445750600282105b1561177e57600060056000858481518110611662576116616120a1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561176b576116ce8382815181106116c1576116c06120a1565b5b6020026020010151610e02565b156116fb576116f68382815181106116e9576116e86120a1565b5b60200260200101516110f5565b61175c565b60028160018054905061170e919061203e565b0361175b57600180548061172557611724612319565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b818061176790611e79565b9250505b808061177690611e79565b915050611634565b5060005b8251811080156117925750600281105b1561188f576000600560008584815181106117b0576117af6120a1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561187c5761181c83828151811061180f5761180e6120a1565b5b6020026020010151611a3b565b600060026000858481518110611835576118346120a1565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b808061188790611e79565b915050611782565b505050565b6060600060018054905067ffffffffffffffff8111156118b7576118b6612072565b5b6040519080825280602002602001820160405280156118e55781602001602082028036833780820191505090505b5090506000600180548060200260200160405190810160405280929190818152602001828054801561196c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611922575b5050505050905060005b600180549050811015611a32576000806001838154811061199a576119996120a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054838281518110611a1357611a126120a1565b5b6020026020010181815250508080611a2a90611e79565b915050611976565b50809250505090565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b5080546000825590600052602060002090810190611b039190611b90565b50565b828054828255906000526020600020908101928215611b7f579160200282015b82811115611b7e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b26565b5b509050611b8c9190611b90565b5090565b5b80821115611ba9576000816000905550600101611b91565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c0482611bd9565b9050919050565b611c1481611bf9565b82525050565b6000611c268383611c0b565b60208301905092915050565b6000602082019050919050565b6000611c4a82611bad565b611c548185611bb8565b9350611c5f83611bc9565b8060005b83811015611c90578151611c778882611c1a565b9750611c8283611c32565b925050600181019050611c63565b5085935050505092915050565b60006020820190508181036000830152611cb78184611c3f565b905092915050565b600080fd5b611ccd81611bf9565b8114611cd857600080fd5b50565b600081359050611cea81611cc4565b92915050565b600060208284031215611d0657611d05611cbf565b5b6000611d1484828501611cdb565b91505092915050565b6000819050919050565b611d3081611d1d565b82525050565b6000602082019050611d4b6000830184611d27565b92915050565b611d5a81611d1d565b8114611d6557600080fd5b50565b600081359050611d7781611d51565b92915050565b600060208284031215611d9357611d92611cbf565b5b6000611da184828501611d68565b91505092915050565b60008060408385031215611dc157611dc0611cbf565b5b6000611dcf85828601611cdb565b9250506020611de085828601611d68565b9150509250929050565b611df381611bf9565b82525050565b6000602082019050611e0e6000830184611dea565b92915050565b60008115159050919050565b611e2981611e14565b82525050565b6000602082019050611e446000830184611e20565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e8482611d1d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611eb657611eb5611e4a565b5b600182019050919050565b6000611ecc82611d1d565b9150611ed783611d1d565b9250828203905081811115611eef57611eee611e4a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f2f82611d1d565b9150611f3a83611d1d565b925082611f4a57611f49611ef5565b5b828206905092915050565b600082825260208201905092915050565b7f566f746520616c72656164792072656769737465726564000000000000000000600082015250565b6000611f9c601783611f55565b9150611fa782611f66565b602082019050919050565b60006020820190508181036000830152611fcb81611f8f565b9050919050565b7f41206e6f64652063616e206e6f7420766f74652068696d73656c660000000000600082015250565b6000612008601b83611f55565b915061201382611fd2565b602082019050919050565b6000602082019050818103600083015261203781611ffb565b9050919050565b600061204982611d1d565b915061205483611d1d565b925082820190508082111561206c5761206b611e4a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506120df81611cc4565b92915050565b6000602082840312156120fb576120fa611cbf565b5b6000612109848285016120d0565b91505092915050565b7f436f6e74726163742070726f78792061646472657373206973206e6f7420636f60008201527f7272656374000000000000000000000000000000000000000000000000000000602082015250565b600061216e602583611f55565b915061217982612112565b604082019050919050565b6000602082019050818103600083015261219d81612161565b9050919050565b7f41646472657373206973206e6f74206120636f6e747261637400000000000000600082015250565b60006121da601983611f55565b91506121e5826121a4565b602082019050919050565b60006020820190508181036000830152612209816121cd565b9050919050565b7f4e6f7420696e20766f746174696f6e2074696d65000000000000000000000000600082015250565b6000612246601483611f55565b915061225182612210565b602082019050919050565b6000602082019050818103600083015261227581612239565b9050919050565b600061228782611d1d565b915061229283611d1d565b9250826122a2576122a1611ef5565b5b828204905092915050565b7f56616c696461746f72206e6f7420666f756e642e000000000000000000000000600082015250565b60006122e3601483611f55565b91506122ee826122ad565b602082019050919050565b60006020820190508181036000830152612312816122d6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220642033781e2fd2b40abfffcc897b7e0878247962ec8695e844ee3939add38f3764736f6c63430008120033";
  public static final String FUNC_NEXTVALIDATORS = "nextValidators";
  public static final String FUNC_ISVALIDATOR = "isValidator";
  public static final String FUNC_GETVALIDATORS = "getValidators";
  public static final String FUNC_VOTEVALIDATOR = "voteValidator";
  public static final String FUNC_NEXTTURN = "nextTurn";
  public static final String FUNC_NEXTTURNANDVOTE = "nextTurnAndVote";
  public static final String FUNC_GETBLOCK = "getBlock";
  public static String INITIAL_ADDRESS = "0xb624d87403ac9f170ea9678a07051adc6fd7dc16";
  public static String INITIAL_VALIDATOR = "0x1c21335d5e5d3f675d7eb7e19e943535555bb291";
  private ProxyContract proxyContract;
  private static final Logger LOG = LoggerFactory.getLogger(RepuContract.class);

  public RepuContract(
          String contractAddress,
          Web3j web3j,
          Credentials credentials,
          ContractGasProvider contractGasProvider,
          ProxyContract proxyContract) {
    this(contractAddress, web3j, credentials, contractGasProvider);
    this.proxyContract = proxyContract;
  }

  public RepuContract(
          String contractAddress,
          Web3j web3j,
          Credentials credentials,
          ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  private RemoteFunctionCall<List> nextValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<Boolean> isValidatorCall(String address) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_ISVALIDATOR,
                    Collections.singletonList(new Address(address)),
                    Collections.singletonList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  private RemoteFunctionCall<List> getValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<TransactionReceipt> voteValidatorCall(String address, BigInteger nonce) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_VOTEVALIDATOR,
                    Arrays.asList(new Address(address), new Uint256(nonce)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> nextTurnAndVoteCall(String address, BigInteger nonce) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTTURNANDVOTE,
                    Arrays.asList(new Address(address), new Uint256(nonce)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> nextTurnCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTTURN,
                    Collections.emptyList(),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<BigInteger> getBlockCall() {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETBLOCK,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<Uint256>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public static RemoteCall<RepuContract> deploy(
          Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
    return deployRemoteCall(
            RepuContract.class,
            web3j,
            credentials,
            contractGasProvider,
            BINARY,
            FunctionEncoder.encodeConstructor(Arrays.asList(new Address(ProxyContract.ADDRESS), new Address(INITIAL_VALIDATOR))));
  }

  public void setProxyContract(ProxyContract proxyContract) {
    this.proxyContract = proxyContract;
  }

  private void checkAddress(){
    if(!Objects.equals(proxyContract.getContractAddress(), this.getContractAddress())) {
      try {
        this.setContractAddress(proxyContract.getConsensusAddress());
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
  }

  public List<String> nextValidators() throws Exception { return this.nextValidatorsCall().send(); }

  public Boolean isValidator(String address) throws Exception { return this.isValidatorCall(address).send(); }

  public List<String> getValidators() throws Exception { return this.getValidatorsCall().send(); }

  public void voteValidator(String address, BigInteger nonce) throws Exception { this.voteValidatorCall(address, nonce).send(); }

  public void nextTurnAndVote(String address, BigInteger nonce) throws Exception { this.nextTurnAndVoteCall(address, nonce).send(); }

  public void nextTurn() throws Exception { this.nextTurnCall().send(); }

  public long getBlock() throws Exception { return this.getBlockCall().send().longValue(); }




}
