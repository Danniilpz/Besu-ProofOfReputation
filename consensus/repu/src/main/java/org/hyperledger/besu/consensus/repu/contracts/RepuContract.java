/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package org.hyperledger.besu.consensus.repu.contracts;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
public class RepuContract extends Contract {
  public static final String BINARY = "6080604052600a6009556001600a553480156200001b57600080fd5b506040516200274138038062002741833981810160405281019062000041919062000659565b62000052816200011960201b60201c565b62000077732ed64d60e50f820b240eb5905b0a73848b2506d66200011960201b60201c565b62000087620001c360201b60201c565b600060068190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000826565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60005b600180549050811015620002bf576200022660018281548110620001ef57620001ee620006a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620002ea60201b60201c565b6000806001848154811062000240576200023f620006a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080620002b69062000708565b915050620001c6565b50620002d06200038a60201b60201c565b60019080519060200190620002e792919062000541565b50565b6000600a54600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200033b919062000784565b600954670de0b6b3a76400008473ffffffffffffffffffffffffffffffffffffffff16316200036b919062000784565b62000377919062000784565b620003839190620007bc565b9050919050565b6060600060018054905067ffffffffffffffff811115620003b057620003af620007f7565b5b604051908082528060200260200182016040528015620003df5781602001602082028036833780820191505090505b509050600060018054806020026020016040519081016040528092919081815260200182805480156200046857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200041d575b5050505050905060005b6001805490508110156200053857600080600183815481106200049a5762000499620006a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054838281518110620005165762000515620006a0565b5b60200260200101818152505080806200052f9062000708565b91505062000472565b50809250505090565b828054828255906000526020600020908101928215620005bd579160200282015b82811115620005bc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000562565b5b509050620005cc9190620005d0565b5090565b5b80821115620005eb576000816000905550600101620005d1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200062182620005f4565b9050919050565b620006338162000614565b81146200063f57600080fd5b50565b600081519050620006538162000628565b92915050565b60008060408385031215620006735762000672620005ef565b5b6000620006838582860162000642565b9250506020620006968582860162000642565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200071582620006fe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200074a5762000749620006cf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200079182620006fe565b91506200079e83620006fe565b925082620007b157620007b062000755565b5b828204905092915050565b6000620007c982620006fe565b9150620007d683620006fe565b9250828201905080821115620007f157620007f0620006cf565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f0b80620008366000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063933a9ce8116100a2578063b872953e11610071578063b872953e1461027e578063b9137cca146102ae578063bdf3e088146102cc578063cdd72253146102e8578063facd743b146103065761010b565b8063933a9ce81461020a5780639cbfc76514610228578063b28fc60014610244578063b7ab4db5146102605761010b565b80633ea4fa47116100de5780633ea4fa47146101865780637b778b70146101a25780637ed21005146101be578063899c7184146101da5761010b565b806306a49fce146101105780631ba5eec01461012e5780632945400c146101385780632e97766d14610168575b600080fd5b610118610336565b604051610125919061196e565b60405180910390f35b6101366103c4565b005b610152600480360381019061014d91906119c1565b61040e565b60405161015f9190611a07565b60405180910390f35b610170610426565b60405161017d9190611a07565b60405180910390f35b6101a0600480360381019061019b9190611a4e565b61042e565b005b6101bc60048036038101906101b79190611a7b565b610492565b005b6101d860048036038101906101d39190611a7b565b61063d565b005b6101f460048036038101906101ef91906119c1565b61066f565b6040516102019190611a07565b60405180910390f35b610212610687565b60405161021f9190611aca565b60405180910390f35b610242600480360381019061023d91906119c1565b6106b1565b005b61025e60048036038101906102599190611a4e565b6108cb565b005b61026861092f565b604051610275919061196e565b60405180910390f35b610298600480360381019061029391906119c1565b6109bd565b6040516102a59190611a07565b60405180910390f35b6102b66109d5565b6040516102c3919061196e565b60405180910390f35b6102e660048036038101906102e191906119c1565b610bd1565b005b6102f0610db1565b6040516102fd919061196e565b60405180910390f35b610320600480360381019061031b91906119c1565b610e3f565b60405161032d9190611b00565b60405180910390f35b606060038054806020026020016040519081016040528092919081815260200182805480156103ba57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610370575b5050505050905090565b600660008154809291906103d790611b4a565b91905055506000600560016103ea610426565b6103f49190611b92565b6103fe9190611bf5565b0361040c5761040b610ee0565b5b565b60056020528060005260406000206000915090505481565b600043905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048857600080fd5b8060098190555050565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036105e4576003829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061063490611b4a565b91905055505050565b6106456103c4565b60006005610651610426565b61065b9190611bf5565b0361066b5761066a8282610492565b5b5050565b60006020528060005260406000206000915090505481565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061074382600180548060200260200160405190810160405280929190818152602001828054801561073957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ef575b5050505050610f1c565b9050600180549050811061078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390611c83565b60405180910390fd5b600180808054905061079e9190611b92565b815481106107af576107ae611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600182815481106107ee576107ed611ca3565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061084857610847611cd2565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556108c7610fa2565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461092557600080fd5b80600a8190555050565b606060018054806020026020016040519081016040528092919081815260200182805480156109b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610969575b5050505050905090565b60026020528060005260406000206000915090505481565b606060006001805490506006546109ec9190611bf5565b905060008060018054905067ffffffffffffffff811115610a1057610a0f611d01565b5b604051908082528060200260200182016040528015610a3e5781602001602082028036833780820191505090505b5090505b600180549050831015610afc5760018381548110610a6357610a62611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818381518110610aa157610aa0611ca3565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508280610ae690611b4a565b9350508180610af490611b4a565b925050610a42565b600092505b600180549050600654610b149190611bf5565b831015610bc85760018381548110610b2f57610b2e611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818381518110610b6d57610b6c611ca3565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508280610bb290611b4a565b9350508180610bc090611b4a565b925050610b01565b80935050505090565b8060008173ffffffffffffffffffffffffffffffffffffffff1663933a9ce86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190611d45565b90508073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccc90611de4565b60405180910390fd5b82610cdf816110ad565b610d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1590611e50565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ed8f67f856040518263ffffffff1660e01b8152600401610d799190611aca565b600060405180830381600087803b158015610d9357600080fd5b505af1158015610da7573d6000803e3d6000fd5b5050505050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610e3557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610deb575b5050505050905090565b6000600180549050610ed7836001805480602002602001604051908101604052809291908181526020018280548015610ecd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e83575b5050505050610f1c565b14159050919050565b6000610eea6110d0565b905060036000610efa91906117b6565b60046000610f0891906117b6565b610f11816112cb565b610f19610fa2565b50565b600080600090505b8251811015610f96578373ffffffffffffffffffffffffffffffffffffffff16838281518110610f5757610f56611ca3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610f835780915050610f9c565b8080610f8e90611b4a565b915050610f24565b50815190505b92915050565b60005b60018054905081101561108c57610ff960018281548110610fc957610fc8611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114cd565b600080600184815481106110105761100f611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061108490611b4a565b915050610fa5565b50611095611565565b600190805190602001906110aa9291906117d7565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060600060038054905067ffffffffffffffff8111156110f3576110f2611d01565b5b6040519080825280602002602001820160405280156111215781602001602082028036833780820191505090505b509050600060038054905067ffffffffffffffff81111561114557611144611d01565b5b6040519080825280602002602001820160405280156111735781602001602082028036833780820191505090505b50905060005b6003805490508110156112c257600260006003838154811061119e5761119d611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483828151811061121757611216611ca3565b5b6020026020010181815250506003818154811061123757611236611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061127557611274611ca3565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806112ba90611b4a565b915050611179565b50809250505090565b60028151106112e757600160006112e291906117b6565b61141c565b60005b815181101561141a5760006005600084848151811061130c5761130b611ca3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156114075761137882828151811061136b5761136a611ca3565b5b6020026020010151610e3f565b156113a5576113a082828151811061139357611392611ca3565b5b60200260200101516106b1565b611406565b6002816001805490506113b89190611e70565b036114055760018054806113cf576113ce611cd2565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b5b808061141290611b4a565b9150506112ea565b505b60005b81518110801561142f5750600281105b156114c95761145782828151811061144a57611449611ca3565b5b602002602001015161170c565b6000600260008484815181106114705761146f611ca3565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806114c190611b4a565b91505061141f565b5050565b6000600a54600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461151c9190611ea4565b600954670de0b6b3a76400008473ffffffffffffffffffffffffffffffffffffffff163161154a9190611ea4565b6115549190611ea4565b61155e9190611e70565b9050919050565b6060600060018054905067ffffffffffffffff81111561158857611587611d01565b5b6040519080825280602002602001820160405280156115b65781602001602082028036833780820191505090505b5090506000600180548060200260200160405190810160405280929190818152602001828054801561163d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116115f3575b5050505050905060005b600180549050811015611703576000806001838154811061166b5761166a611ca3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548382815181106116e4576116e3611ca3565b5b60200260200101818152505080806116fb90611b4a565b915050611647565b50809250505090565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b50805460008255906000526020600020908101906117d49190611861565b50565b828054828255906000526020600020908101928215611850579160200282015b8281111561184f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906117f7565b5b50905061185d9190611861565b5090565b5b8082111561187a576000816000905550600101611862565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118d5826118aa565b9050919050565b6118e5816118ca565b82525050565b60006118f783836118dc565b60208301905092915050565b6000602082019050919050565b600061191b8261187e565b6119258185611889565b93506119308361189a565b8060005b8381101561196157815161194888826118eb565b975061195383611903565b925050600181019050611934565b5085935050505092915050565b600060208201905081810360008301526119888184611910565b905092915050565b600080fd5b61199e816118ca565b81146119a957600080fd5b50565b6000813590506119bb81611995565b92915050565b6000602082840312156119d7576119d6611990565b5b60006119e5848285016119ac565b91505092915050565b6000819050919050565b611a01816119ee565b82525050565b6000602082019050611a1c60008301846119f8565b92915050565b611a2b816119ee565b8114611a3657600080fd5b50565b600081359050611a4881611a22565b92915050565b600060208284031215611a6457611a63611990565b5b6000611a7284828501611a39565b91505092915050565b60008060408385031215611a9257611a91611990565b5b6000611aa0858286016119ac565b9250506020611ab185828601611a39565b9150509250929050565b611ac4816118ca565b82525050565b6000602082019050611adf6000830184611abb565b92915050565b60008115159050919050565b611afa81611ae5565b82525050565b6000602082019050611b156000830184611af1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b55826119ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b8757611b86611b1b565b5b600182019050919050565b6000611b9d826119ee565b9150611ba8836119ee565b9250828203905081811115611bc057611bbf611b1b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c00826119ee565b9150611c0b836119ee565b925082611c1b57611c1a611bc6565b5b828206905092915050565b600082825260208201905092915050565b7f56616c696461746f72206e6f7420666f756e642e000000000000000000000000600082015250565b6000611c6d601483611c26565b9150611c7882611c37565b602082019050919050565b60006020820190508181036000830152611c9c81611c60565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050611d3f81611995565b92915050565b600060208284031215611d5b57611d5a611990565b5b6000611d6984828501611d30565b91505092915050565b7f436f6e74726163742070726f78792061646472657373206973206e6f7420636f60008201527f7272656374000000000000000000000000000000000000000000000000000000602082015250565b6000611dce602583611c26565b9150611dd982611d72565b604082019050919050565b60006020820190508181036000830152611dfd81611dc1565b9050919050565b7f41646472657373206973206e6f74206120636f6e747261637400000000000000600082015250565b6000611e3a601983611c26565b9150611e4582611e04565b602082019050919050565b60006020820190508181036000830152611e6981611e2d565b9050919050565b6000611e7b826119ee565b9150611e86836119ee565b9250828201905080821115611e9e57611e9d611b1b565b5b92915050565b6000611eaf826119ee565b9150611eba836119ee565b925082611eca57611ec9611bc6565b5b82820490509291505056fea26469706673582212201c947e0a247b1918ce86a8c7d7b77c85a8c848b0d207c078c70166c11c77a5f364736f6c63430008120033";
  public static final String FUNC_NEXTVALIDATORS = "nextValidators";
  public static final String FUNC_ISVALIDATOR = "isValidator";
  public static final String FUNC_GETVALIDATORS = "getValidators";
  public static final String FUNC_VOTEVALIDATOR = "voteValidator";
  public static final String FUNC_NEXTTURN = "nextTurn";
  public static final String FUNC_NEXTTURNANDVOTE = "nextTurnAndVote";
  public static final String FUNC_GETBLOCK = "getBlock";
  public static String INITIAL_ADDRESS = "0xb624d87403ac9f170ea9678a07051adc6fd7dc16";
  public static String INITIAL_VALIDATOR = "0x1c21335d5e5d3f675d7eb7e19e943535555bb291";
  private ProxyContract proxyContract;
  private static final Logger LOG = LoggerFactory.getLogger(RepuContract.class);

  public RepuContract(
          String contractAddress,
          Web3j web3j,
          Credentials credentials,
          ContractGasProvider contractGasProvider,
          ProxyContract proxyContract) {
    this(contractAddress, web3j, credentials, contractGasProvider);
    this.proxyContract = proxyContract;
  }

  public RepuContract(
          String contractAddress,
          Web3j web3j,
          Credentials credentials,
          ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  private RemoteFunctionCall<List> nextValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<List>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<Boolean> isValidatorCall(String address) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_ISVALIDATOR,
                    Collections.singletonList(new Address(address)),
                    Collections.singletonList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  private RemoteFunctionCall<List> getValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<List>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<TransactionReceipt> voteValidatorCall(String address, BigInteger nonce) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_VOTEVALIDATOR,
                    Arrays.asList(new Address(address), new Uint256(nonce)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> nextTurnAndVoteCall(String address, BigInteger nonce) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTTURNANDVOTE,
                    Arrays.asList(new Address(address), new Uint256(nonce)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> nextTurnCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTTURN,
                    Collections.emptyList(),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<BigInteger> getBlockCall() {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETBLOCK,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<Uint256>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public static RemoteCall<RepuContract> deploy(
          Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
    return deployRemoteCall(
            RepuContract.class,
            web3j,
            credentials,
            contractGasProvider,
            BINARY,
            FunctionEncoder.encodeConstructor(Arrays.asList(new Address(ProxyContract.ADDRESS), new Address(INITIAL_VALIDATOR))));
  }

  public void setProxyContract(ProxyContract proxyContract) {
    this.proxyContract = proxyContract;
  }

  private void checkAddress(){
    if(!Objects.equals(proxyContract.getContractAddress(), this.getContractAddress())) {
      try {
        this.setContractAddress(proxyContract.getConsensusAddress());
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
  }

  public List<String> nextValidators() throws Exception { return this.nextValidatorsCall().send(); }

  public Boolean isValidator(String address) throws Exception { return this.isValidatorCall(address).send(); }

  public List<String> getValidators() throws Exception { return this.getValidatorsCall().send(); }

  public void voteValidator(String address, BigInteger nonce) throws Exception { this.voteValidatorCall(address, nonce).send(); }

  public void nextTurnAndVote(String address, BigInteger nonce) throws Exception { this.nextTurnAndVoteCall(address, nonce).send(); }

  public void nextTurn() throws Exception { this.nextTurnCall().send(); }

  public long getBlock() throws Exception { return this.getBlockCall().send().longValue(); }




}
