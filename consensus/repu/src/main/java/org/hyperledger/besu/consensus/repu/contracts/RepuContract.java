/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package org.hyperledger.besu.consensus.repu.contracts;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
public class RepuContract extends Contract {
  public static final String BINARY = "60806040523480156200001157600080fd5b506040516200230b3803806200230b8339818101604052810190620000379190620008cd565b6200004881620000e360201b60201c565b6200006d732ed64d60e50f820b240eb5905b0a73848b2506d6620000e360201b60201c565b620000927311f8ebff1b0ffb4de7814cc25430d01149fcdc71620000e360201b60201c565b600060028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000b03565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200019a6200019d60201b60201c565b50565b60005b600180549050811015620002a05760018181548110620001c557620001c462000914565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16316000806001848154811062000221576200022062000914565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808062000297906200097c565b915050620001a0565b50620002b1620002cb60201b60201c565b60019080519060200190620002c8929190620007b5565b50565b6060600060018054905067ffffffffffffffff811115620002f157620002f0620009c9565b5b604051908082528060200260200182016040528015620003205781602001602082028036833780820191505090505b509050600060018054905067ffffffffffffffff811115620003475762000346620009c9565b5b604051908082528060200260200182016040528015620003765781602001602082028036833780820191505090505b50905060005b600180549050811015620004d45760008060018381548110620003a457620003a362000914565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483828151811062000420576200041f62000914565b5b6020026020010181815250506001818154811062000443576200044262000914565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811062000484576200048362000914565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080620004cb906200097c565b9150506200037c565b50620004f98282600060018551620004ed9190620009f8565b6200050160201b60201c565b809250505090565b600082905060008290508082036200051b575050620007af565b600086600286866200052e9190620009f8565b6200053a919062000a62565b8662000547919062000a9a565b815181106200055b576200055a62000914565b5b602002602001015190505b8183116200076f575b8087848151811062000586576200058562000914565b5b60200260200101511115620005ab578280620005a2906200097c565b9350506200056f565b5b868281518110620005c257620005c162000914565b5b6020026020010151811115620005e8578180620005df9062000ad5565b925050620005ac565b818311620007695786828151811062000606576200060562000914565b5b602002602001015187848151811062000624576200062362000914565b5b602002602001015188858151811062000642576200064162000914565b5b602002602001018985815181106200065f576200065e62000914565b5b602002602001018281525082815250505085828151811062000686576200068562000914565b5b6020026020010151868481518110620006a457620006a362000914565b5b6020026020010151878581518110620006c257620006c162000914565b5b60200260200101888581518110620006df57620006de62000914565b5b602002602001018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505050828062000755906200097c565b9350508180620007659062000ad5565b9250505b62000566565b818510156200078d576200078c878787856200050160201b60201c565b5b83831015620007ab57620007aa878785876200050160201b60201c565b5b5050505b50505050565b82805482825590600052602060002090810192821562000831579160200282015b82811115620008305782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620007d6565b5b50905062000840919062000844565b5090565b5b808211156200085f57600081600090555060010162000845565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008958262000868565b9050919050565b620008a78162000888565b8114620008b357600080fd5b50565b600081519050620008c7816200089c565b92915050565b60008060408385031215620008e757620008e662000863565b5b6000620008f785828601620008b6565b92505060206200090a85828601620008b6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620009898262000972565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009be57620009bd62000943565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600062000a058262000972565b915062000a128362000972565b925082820390508181111562000a2d5762000a2c62000943565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000a6f8262000972565b915062000a7c8362000972565b92508262000a8f5762000a8e62000a33565b5b828204905092915050565b600062000aa78262000972565b915062000ab48362000972565b925082820190508082111562000acf5762000ace62000943565b5b92915050565b600062000ae28262000972565b91506000820362000af85762000af762000943565b5b600182039050919050565b6117f88062000b136000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b7ab4db511610066578063b7ab4db5146100f9578063b9137cca14610117578063bdf3e08814610135578063ec55688914610151578063facd743b1461016f57610093565b80632d497ba21461009857806343a73d9a146100a25780634d238c8e146100c15780639cbfc765146100dd575b600080fd5b6100a061019f565b005b6100aa6101b9565b6040516100b892919061116e565b60405180910390f35b6100db60048036038101906100d691906111c8565b6101e9565b005b6100f760048036038101906100f291906111c8565b61029b565b005b610101610456565b60405161010e91906112b3565b60405180910390f35b61011f6104e4565b60405161012c91906112b3565b60405180910390f35b61014f600480360381019061014a91906111c8565b6106e0565b005b6101596109e2565b60405161016691906112d5565b60405180910390f35b610189600480360381019061018491906111c8565b610a08565b60405161019691906112f0565b60405180910390f35b600260008154809291906101b290611344565b9190505550565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001915091509091565b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610298610a22565b50565b60006102a682610b3c565b905060018054905081106102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906113e9565b60405180910390fd5b5b600180805490506103019190611409565b8110156103c15760018082610316919061143d565b8154811061032757610326611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061036657610365611471565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806103b990611344565b9150506102f0565b60018054806103d3576103d26114a0565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055610452610a22565b5050565b606060018054806020026020016040519081016040528092919081815260200182805480156104da57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610490575b5050505050905090565b606060006001805490506002546104fb91906114fe565b905060008060018054905067ffffffffffffffff81111561051f5761051e61152f565b5b60405190808252806020026020018201604052801561054d5781602001602082028036833780820191505090505b5090505b60018054905083101561060b576001838154811061057257610571611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168183815181106105b0576105af611471565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082806105f590611344565b935050818061060390611344565b925050610551565b600092505b60018054905060025461062391906114fe565b8310156106d7576001838154811061063e5761063d611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681838151811061067c5761067b611471565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082806106c190611344565b93505081806106cf90611344565b925050610610565b80935050505090565b806000808273ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f43a73d9a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161078b91906115cf565b6000604051808303816000865af19150503d80600081146107c8576040519150601f19603f3d011682016040523d82523d6000602084013e6107cd565b606091505b5091509150600080828060200190518101906107e99190611650565b915091508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461087d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610874906116dc565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16876040516024016108c991906112d5565b6040516020818303038152906040527f8ed8f67f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161095391906115cf565b6000604051808303816000865af19150503d8060008114610990576040519150601f19603f3d011682016040523d82523d6000602084013e610995565b606091505b50509050806109d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d090611748565b60405180910390fd5b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050610a1983610b3c565b14159050919050565b60005b600180549050811015610b1b5760018181548110610a4657610a45611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163160008060018481548110610a9f57610a9e611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610b1390611344565b915050610a25565b50610b24610bed565b60019080519060200190610b3992919061106b565b50565b600080600090505b600180549050811015610bde578273ffffffffffffffffffffffffffffffffffffffff1660018281548110610b7c57610b7b611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bcb5780915050610be8565b8080610bd690611344565b915050610b44565b5060018054905090505b919050565b6060600060018054905067ffffffffffffffff811115610c1057610c0f61152f565b5b604051908082528060200260200182016040528015610c3e5781602001602082028036833780820191505090505b509050600060018054905067ffffffffffffffff811115610c6257610c6161152f565b5b604051908082528060200260200182016040528015610c905781602001602082028036833780820191505090505b50905060005b600180549050811015610dde5760008060018381548110610cba57610cb9611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054838281518110610d3357610d32611471565b5b60200260200101818152505060018181548110610d5357610d52611471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610d9157610d90611471565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610dd690611344565b915050610c96565b50610df98282600060018551610df49190611409565b610e01565b809250505090565b60008290506000829050808203610e19575050611065565b60008660028686610e2a9190611409565b610e349190611768565b86610e3f919061143d565b81518110610e5057610e4f611471565b5b602002602001015190505b818311611037575b80878481518110610e7757610e76611471565b5b60200260200101511115610e98578280610e9090611344565b935050610e63565b5b868281518110610eac57610eab611471565b5b6020026020010151811115610ece578180610ec690611799565b925050610e99565b81831161103257868281518110610ee857610ee7611471565b5b6020026020010151878481518110610f0357610f02611471565b5b6020026020010151888581518110610f1e57610f1d611471565b5b60200260200101898581518110610f3857610f37611471565b5b6020026020010182815250828152505050858281518110610f5c57610f5b611471565b5b6020026020010151868481518110610f7757610f76611471565b5b6020026020010151878581518110610f9257610f91611471565b5b60200260200101888581518110610fac57610fab611471565b5b602002602001018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505050828061102090611344565b935050818061102e90611799565b9250505b610e5b565b8185101561104c5761104b87878785610e01565b5b838310156110615761106087878587610e01565b5b5050505b50505050565b8280548282559060005260206000209081019282156110e4579160200282015b828111156110e35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061108b565b5b5090506110f191906110f5565b5090565b5b8082111561110e5760008160009055506001016110f6565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061113d82611112565b9050919050565b61114d81611132565b82525050565b60008115159050919050565b61116881611153565b82525050565b60006040820190506111836000830185611144565b611190602083018461115f565b9392505050565b600080fd5b6111a581611132565b81146111b057600080fd5b50565b6000813590506111c28161119c565b92915050565b6000602082840312156111de576111dd611197565b5b60006111ec848285016111b3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61122a81611132565b82525050565b600061123c8383611221565b60208301905092915050565b6000602082019050919050565b6000611260826111f5565b61126a8185611200565b935061127583611211565b8060005b838110156112a657815161128d8882611230565b975061129883611248565b925050600181019050611279565b5085935050505092915050565b600060208201905081810360008301526112cd8184611255565b905092915050565b60006020820190506112ea6000830184611144565b92915050565b6000602082019050611305600083018461115f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061134f8261133a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113815761138061130b565b5b600182019050919050565b600082825260208201905092915050565b7f56616c696461746f72206e6f7420666f756e642e000000000000000000000000600082015250565b60006113d360148361138c565b91506113de8261139d565b602082019050919050565b60006020820190508181036000830152611402816113c6565b9050919050565b60006114148261133a565b915061141f8361133a565b92508282039050818111156114375761143661130b565b5b92915050565b60006114488261133a565b91506114538361133a565b925082820190508082111561146b5761146a61130b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115098261133a565b91506115148361133a565b925082611524576115236114cf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015611592578082015181840152602081019050611577565b60008484015250505050565b60006115a98261155e565b6115b38185611569565b93506115c3818560208601611574565b80840191505092915050565b60006115db828461159e565b915081905092915050565b60006115f182611112565b9050919050565b611601816115e6565b811461160c57600080fd5b50565b60008151905061161e816115f8565b92915050565b61162d81611153565b811461163857600080fd5b50565b60008151905061164a81611624565b92915050565b6000806040838503121561166757611666611197565b5b60006116758582860161160f565b92505060206116868582860161163b565b9150509250929050565b7f50726f78792061646472657373206973206e6f7420636f727265637400000000600082015250565b60006116c6601c8361138c565b91506116d182611690565b602082019050919050565b600060208201905081810360008301526116f5816116b9565b9050919050565b7f4572726f72000000000000000000000000000000000000000000000000000000600082015250565b600061173260058361138c565b915061173d826116fc565b602082019050919050565b6000602082019050818103600083015261176181611725565b9050919050565b60006117738261133a565b915061177e8361133a565b92508261178e5761178d6114cf565b5b828204905092915050565b60006117a48261133a565b9150600082036117b7576117b661130b565b5b60018203905091905056fea2646970667358221220cbaff75642c879a786687e7152dd47ac3a0825e67ffb42552b4f994f6a30a6f264736f6c63430008120033";
  public static final String FUNC_NEXTVALIDATORS = "nextValidators";
  public static final String FUNC_ISVALIDATOR = "isValidator";
  public static final String FUNC_GETVALIDATORS = "getValidators";
  public static final String FUNC_ADDVALIDATOR = "addValidator";
  public static final String FUNC_UPDATEVALIDATORS = "updateValidators";
  public static String INITIAL_ADDRESS = "0xb624d87403ac9f170ea9678a07051adc6fd7dc16";
  public static String INITIAL_VALIDATOR = "0x1c21335d5e5d3f675d7eb7e19e943535555bb291";
  private ProxyContract proxyContract;
  private static final Logger LOG = LoggerFactory.getLogger(RepuContract.class);

  public RepuContract(
          String contractAddress,
          Web3j web3j,
          Credentials credentials,
          ContractGasProvider contractGasProvider,
          ProxyContract proxyContract) {
    this(contractAddress, web3j, credentials, contractGasProvider);
    this.proxyContract = proxyContract;
  }

  public RepuContract(
          String contractAddress,
          Web3j web3j,
          Credentials credentials,
          ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  private RemoteFunctionCall<List> nextValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<List>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<Boolean> isValidatorCall(String address) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_ISVALIDATOR,
                    Collections.singletonList(new Address(address)),
                    Collections.singletonList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  private RemoteFunctionCall<List> getValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<List>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<TransactionReceipt> addValidatorCall(String address) {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_ADDVALIDATOR,
                    Collections.singletonList(new Address(address)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> updateValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_UPDATEVALIDATORS,
                    Collections.emptyList(),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  public static RemoteCall<RepuContract> deploy(
          Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
    return deployRemoteCall(
            RepuContract.class,
            web3j,
            credentials,
            contractGasProvider,
            BINARY,
            FunctionEncoder.encodeConstructor(Arrays.asList(new Address(ProxyContract.ADDRESS), new Address(INITIAL_VALIDATOR))));
  }

  public void setProxyContract(ProxyContract proxyContract) {
    this.proxyContract = proxyContract;
  }

  private void checkAddress(){
    if(!Objects.equals(proxyContract.getContractAddress(), this.getContractAddress())) {
      try {
        this.setContractAddress(proxyContract.getConsensusAddress());
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
  }

  public List<String> nextValidators() throws Exception { return this.nextValidatorsCall().send(); }

  public Boolean isValidator(String address) throws Exception { return this.isValidatorCall(address).send(); }

  public List<String> getValidators() throws Exception { return this.getValidatorsCall().send(); }

  public void updateValidators() throws Exception { this.updateValidatorsCall().send(); }


}
