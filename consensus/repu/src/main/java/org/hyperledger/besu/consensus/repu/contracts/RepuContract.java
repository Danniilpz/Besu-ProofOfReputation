/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package org.hyperledger.besu.consensus.repu.contracts;

import org.hyperledger.besu.consensus.repu.RepuHelpers;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
public class RepuContract extends Contract {
  public static final String BINARY = "";
  public static final String FUNC_NEXTVALIDATORS = "nextValidators";
  public static final String FUNC_ISVALIDATOR = "isValidator";
  public static final String FUNC_GETVALIDATORS = "getValidators";
  public static final String FUNC_VOTEVALIDATOR = "voteValidator";
  public static final String FUNC_NEXTTURN = "nextTurn";
  public static final String FUNC_NEXTTURNANDVOTE = "nextTurnAndVote";
  public static final String FUNC_GETBLOCK = "getBlock";
  public static final String FUNC_GETREPUTATION = "getReputation";
  public static final String FUNC_GETVOTES = "getVotes";
  public static final String INITIAL_ADDRESS = "0xb624d87403ac9f170ea9678a07051adc6fd7dc16";
  public static final String INITIAL_VALIDATOR = "0x1c21335d5e5d3f675d7eb7e19e943535555bb291";
  private ProxyContract proxyContract;

  public RepuContract(
          final String contractAddress,
          final Web3j web3j,
          final Credentials credentials,
          final ContractGasProvider contractGasProvider,
          final ProxyContract proxyContract) {
    this(contractAddress, web3j, credentials, contractGasProvider);
    this.proxyContract = proxyContract;
  }

  public RepuContract(
          final String contractAddress,
          final Web3j web3j,
          final Credentials credentials,
          final ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  private RemoteFunctionCall<List> nextValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<Boolean> isValidatorCall(final String address) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_ISVALIDATOR,
                    Collections.singletonList(new Address(address)),
                    Collections.singletonList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  private RemoteFunctionCall<BigInteger> getReputationCall(final String address) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETREPUTATION,
                    Collections.singletonList(new Address(address)),
                    Collections.singletonList(new TypeReference<Uint256>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  private RemoteFunctionCall<BigInteger> getVotesCall(final String address) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETVOTES,
                    Collections.singletonList(new Address(address)),
                    Collections.singletonList(new TypeReference<Uint256>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  private RemoteFunctionCall<List> getValidatorsCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETVALIDATORS,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<DynamicArray<Address>>() {}));
    return new RemoteFunctionCall<>(
            function,
            () -> {
              List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
              return convertToNative(result);
            });
  }

  private RemoteFunctionCall<TransactionReceipt> voteValidatorCall(final String address, final BigInteger nonce) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_VOTEVALIDATOR,
                    Arrays.asList(new Address(address), new Uint256(nonce)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> nextTurnAndVoteCall(final String address, final BigInteger nonce) {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTTURNANDVOTE,
                    Arrays.asList(new Address(address), new Uint256(nonce)),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<TransactionReceipt> nextTurnCall() {
    this.checkAddress();
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_NEXTTURN,
                    Collections.emptyList(),
                    Collections.emptyList());
    return executeRemoteCallTransaction(function);
  }

  private RemoteFunctionCall<BigInteger> getBlockCall() {
    final org.web3j.abi.datatypes.Function function =
            new org.web3j.abi.datatypes.Function(
                    FUNC_GETBLOCK,
                    Collections.emptyList(),
                    Collections.singletonList(new TypeReference<Uint256>() {}));
    return executeRemoteCallSingleValueReturn(function, BigInteger.class);
  }

  public static RemoteCall<RepuContract> deploy(
          final Web3j web3j, final Credentials credentials, final ContractGasProvider contractGasProvider) {
    return deployRemoteCall(
            RepuContract.class,
            web3j,
            credentials,
            contractGasProvider,
            BINARY,
            FunctionEncoder.encodeConstructor(Arrays.asList(new Address(ProxyContract.ADDRESS),
                    new Address(INITIAL_VALIDATOR), new Uint256(RepuHelpers.VOTATION_TIME))));
  }

  public void setProxyContract(final ProxyContract proxyContract) {
    this.proxyContract = proxyContract;
  }

  private void checkAddress(){
    if(!Objects.equals(proxyContract.getContractAddress(), this.getContractAddress())) {
      try {
        this.setContractAddress(proxyContract.getConsensusAddress());
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
  }

  public List<String> nextValidators() throws Exception { return this.nextValidatorsCall().send(); }

  public Boolean isValidator(final String address) throws Exception { return this.isValidatorCall(address).send(); }

  public BigInteger getReputation(final String address) throws Exception { return this.getReputationCall(address).send(); }

  public BigInteger getVotes(final String address) throws Exception { return this.getVotesCall(address).send(); }

  public List<String> getValidators() throws Exception { return this.getValidatorsCall().send(); }

  public void voteValidator(final String address, final BigInteger nonce) throws Exception { this.voteValidatorCall(address, nonce).send(); }

  public void nextTurnAndVote(final String address, final BigInteger nonce) throws Exception { this.nextTurnAndVoteCall(address, nonce).send(); }

  public void nextTurn() throws Exception { this.nextTurnCall().send(); }

  public long getBlock() throws Exception { return this.getBlockCall().send().longValue(); }




}
